Terminals unused in grammar

    BOOLCONST
    WHILE
    COLUMNS


State 41 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl-list

    2 decl-list: decl-list decl
    3          | decl

    4 decl: decl-var SEMI_COL
    5     | function

    6 decl-var: TIPO ID SEMI_COL
    7         | TIPO ID LC INT RC SEMI_COL

    8 function: TIPO ID LP params RP compound-stmt

    9 params: params-list
   10       | %empty

   11 params-list: params-list COL param
   12            | param

   13 param: TIPO ID
   14      | TIPO ID LC RC

   15 local-decl: local-decl decl-var
   16           | %empty

   17 compound-stmt: LCH local-decl stmt-list RCH

   18 stmt-list: stmt-list stmt
   19          | %empty

   20 stmt: cond-block
   21     | expr SEMI_COL
   22     | iter
   23     | iter-table
   24     | return

   25 expr: variable ATRIB expr-op
   26     | simple-expr
   27     | table

   28 cond-block: IF LP simple-expr RP compound-stmt
   29           | IF LP simple-expr RP compound-stmt ELSE compound-stmt

   30 iter: FOR LP expr SEMI_COL simple-expr SEMI_COL expr RP compound-stmt

   31 return: RETURN expr SEMI_COL
   32       | RETURN SEMI_COL

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable SEMI_COL variable RP compound-stmt
   34           | FOR CELLS LP variable SEMI_COL variable RP compound-stmt

   35 variable: ID
   36         | ID LC simple-expr RC

   37 simple-expr: expr-op CMDOP expr-op
   38            | expr-op

   39 expr-op: expr-op OP term
   40        | term

   41 term: term OP factor
   42     | factor

   43 factor: LP expr RP
   44       | variable
   45       | call
   46       | INT
   47       | FLOAT

   48 call: ID LP args RP

   49 args: args-list
   50     | %empty

   51 args-list: args-list COL args
   52          | simple-expr

   53 table: ID ATRIB LCH list-table RCH SEMI_COL

   54 list-table: STR_VAL DOUBLEDOT LC factor-list RC
   55           | list-table COL list-table
   56           | %empty

   57 factor-list: factor COL factor
   58            | factor
   59            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <i_val> (258) 7 46
    FLOAT <f_val> (259) 47
    TIPO <tipo> (260) 6 7 8 13 14
    BOOLCONST (261)
    STR_VAL <str_val> (262) 33 54
    OP <op> (263) 39 41
    CMDOP <cmdop> (264) 37
    SEMI_COL <teste> (265) 4 6 7 21 30 31 32 33 34 53
    LP <teste> (266) 8 28 29 30 33 34 43 48
    RP <teste> (267) 8 28 29 30 33 34 43 48
    LCH <teste> (268) 17 53
    RCH <teste> (269) 17 53
    LC <teste> (270) 7 14 33 36 54
    RC <teste> (271) 7 14 33 36 54
    COL <teste> (272) 11 51 55 57
    ATRIB <teste> (273) 25 53
    DOUBLEDOT <teste> (274) 54
    IF <teste> (275) 28 29
    WHILE <teste> (276)
    FOR <teste> (277) 30 33 34
    ELSE <teste> (278) 29
    ROWS <teste> (279) 33
    COLUMNS <teste> (280)
    CELLS <teste> (281) 34
    RETURN <teste> (282) 31 32
    ID <id> (283) 6 7 8 13 14 35 36 48 53


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    program <_program> (30)
        on left: 1
        on right: 0
    decl-list <_decl_list> (31)
        on left: 2 3
        on right: 1 2
    decl <_decl> (32)
        on left: 4 5
        on right: 2 3
    decl-var <_decl_var> (33)
        on left: 6 7
        on right: 4 15
    function <_function> (34)
        on left: 8
        on right: 5
    params <_params> (35)
        on left: 9 10
        on right: 8
    params-list <_params_list> (36)
        on left: 11 12
        on right: 9 11
    param <_param> (37)
        on left: 13 14
        on right: 11 12
    local-decl <_local_decl> (38)
        on left: 15 16
        on right: 15 17
    compound-stmt <_compound_stmt> (39)
        on left: 17
        on right: 8 28 29 30 33 34
    stmt-list <_stmt_list> (40)
        on left: 18 19
        on right: 17 18
    stmt <_stmt> (41)
        on left: 20 21 22 23 24
        on right: 18
    expr <_expr> (42)
        on left: 25 26 27
        on right: 21 30 31 43
    cond-block <_cond_block> (43)
        on left: 28 29
        on right: 20
    iter <_iter> (44)
        on left: 30
        on right: 22
    return <_retrn> (45)
        on left: 31 32
        on right: 24
    iter-table <_iter_table> (46)
        on left: 33 34
        on right: 23
    variable <_variable> (47)
        on left: 35 36
        on right: 25 33 34 44
    simple-expr <_simple_expr> (48)
        on left: 37 38
        on right: 26 28 29 30 36 52
    expr-op <_expr_op> (49)
        on left: 39 40
        on right: 25 37 38 39
    term <_term> (50)
        on left: 41 42
        on right: 39 40 41
    factor <_factor> (51)
        on left: 43 44 45 46 47
        on right: 41 42 57 58
    call <_call> (52)
        on left: 48
        on right: 45
    args <_args> (53)
        on left: 49 50
        on right: 48 51
    args-list <_args_list> (54)
        on left: 51 52
        on right: 49 51
    table <_table> (55)
        on left: 53
        on right: 27
    list-table <_list_table> (56)
        on left: 54 55 56
        on right: 53 55
    factor-list <_factor_list> (57)
        on left: 57 58 59
        on right: 54


State 0

    0 $accept: . program $end

    TIPO  shift, and go to state 1

    program    go to state 2
    decl-list  go to state 3
    decl       go to state 4
    decl-var   go to state 5
    function   go to state 6


State 1

    6 decl-var: TIPO . ID SEMI_COL
    7         | TIPO . ID LC INT RC SEMI_COL
    8 function: TIPO . ID LP params RP compound-stmt

    ID  shift, and go to state 7


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: decl-list .
    2 decl-list: decl-list . decl

    TIPO  shift, and go to state 1

    $default  reduce using rule 1 (program)

    decl      go to state 9
    decl-var  go to state 5
    function  go to state 6


State 4

    3 decl-list: decl .

    $default  reduce using rule 3 (decl-list)


State 5

    4 decl: decl-var . SEMI_COL

    SEMI_COL  shift, and go to state 10


State 6

    5 decl: function .

    $default  reduce using rule 5 (decl)


State 7

    6 decl-var: TIPO ID . SEMI_COL
    7         | TIPO ID . LC INT RC SEMI_COL
    8 function: TIPO ID . LP params RP compound-stmt

    SEMI_COL  shift, and go to state 11
    LP        shift, and go to state 12
    LC        shift, and go to state 13


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 decl-list: decl-list decl .

    $default  reduce using rule 2 (decl-list)


State 10

    4 decl: decl-var SEMI_COL .

    $default  reduce using rule 4 (decl)


State 11

    6 decl-var: TIPO ID SEMI_COL .

    $default  reduce using rule 6 (decl-var)


State 12

    8 function: TIPO ID LP . params RP compound-stmt

    TIPO  shift, and go to state 14

    $default  reduce using rule 10 (params)

    params       go to state 15
    params-list  go to state 16
    param        go to state 17


State 13

    7 decl-var: TIPO ID LC . INT RC SEMI_COL

    INT  shift, and go to state 18


State 14

   13 param: TIPO . ID
   14      | TIPO . ID LC RC

    ID  shift, and go to state 19


State 15

    8 function: TIPO ID LP params . RP compound-stmt

    RP  shift, and go to state 20


State 16

    9 params: params-list .
   11 params-list: params-list . COL param

    COL  shift, and go to state 21

    $default  reduce using rule 9 (params)


State 17

   12 params-list: param .

    $default  reduce using rule 12 (params-list)


State 18

    7 decl-var: TIPO ID LC INT . RC SEMI_COL

    RC  shift, and go to state 22


State 19

   13 param: TIPO ID .
   14      | TIPO ID . LC RC

    LC  shift, and go to state 23

    $default  reduce using rule 13 (param)


State 20

    8 function: TIPO ID LP params RP . compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 25


State 21

   11 params-list: params-list COL . param

    TIPO  shift, and go to state 14

    param  go to state 26


State 22

    7 decl-var: TIPO ID LC INT RC . SEMI_COL

    SEMI_COL  shift, and go to state 27


State 23

   14 param: TIPO ID LC . RC

    RC  shift, and go to state 28


State 24

   17 compound-stmt: LCH . local-decl stmt-list RCH

    $default  reduce using rule 16 (local-decl)

    local-decl  go to state 29


State 25

    8 function: TIPO ID LP params RP compound-stmt .

    $default  reduce using rule 8 (function)


State 26

   11 params-list: params-list COL param .

    $default  reduce using rule 11 (params-list)


State 27

    7 decl-var: TIPO ID LC INT RC SEMI_COL .

    $default  reduce using rule 7 (decl-var)


State 28

   14 param: TIPO ID LC RC .

    $default  reduce using rule 14 (param)


State 29

   15 local-decl: local-decl . decl-var
   17 compound-stmt: LCH local-decl . stmt-list RCH

    TIPO  shift, and go to state 30

    $default  reduce using rule 19 (stmt-list)

    decl-var   go to state 31
    stmt-list  go to state 32


State 30

    6 decl-var: TIPO . ID SEMI_COL
    7         | TIPO . ID LC INT RC SEMI_COL

    ID  shift, and go to state 33


State 31

   15 local-decl: local-decl decl-var .

    $default  reduce using rule 15 (local-decl)


State 32

   17 compound-stmt: LCH local-decl stmt-list . RCH
   18 stmt-list: stmt-list . stmt

    INT     shift, and go to state 34
    FLOAT   shift, and go to state 35
    LP      shift, and go to state 36
    RCH     shift, and go to state 37
    IF      shift, and go to state 38
    FOR     shift, and go to state 39
    RETURN  shift, and go to state 40
    ID      shift, and go to state 41

    stmt         go to state 42
    expr         go to state 43
    cond-block   go to state 44
    iter         go to state 45
    return       go to state 46
    iter-table   go to state 47
    variable     go to state 48
    simple-expr  go to state 49
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    table        go to state 54


State 33

    6 decl-var: TIPO ID . SEMI_COL
    7         | TIPO ID . LC INT RC SEMI_COL

    SEMI_COL  shift, and go to state 11
    LC        shift, and go to state 13


State 34

   46 factor: INT .

    $default  reduce using rule 46 (factor)


State 35

   47 factor: FLOAT .

    $default  reduce using rule 47 (factor)


State 36

   43 factor: LP . expr RP

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 41

    expr         go to state 55
    variable     go to state 48
    simple-expr  go to state 49
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    table        go to state 54


State 37

   17 compound-stmt: LCH local-decl stmt-list RCH .

    $default  reduce using rule 17 (compound-stmt)


State 38

   28 cond-block: IF . LP simple-expr RP compound-stmt
   29           | IF . LP simple-expr RP compound-stmt ELSE compound-stmt

    LP  shift, and go to state 56


State 39

   30 iter: FOR . LP expr SEMI_COL simple-expr SEMI_COL expr RP compound-stmt
   33 iter-table: FOR . ROWS LC STR_VAL RC LP variable SEMI_COL variable RP compound-stmt
   34           | FOR . CELLS LP variable SEMI_COL variable RP compound-stmt

    LP     shift, and go to state 57
    ROWS   shift, and go to state 58
    CELLS  shift, and go to state 59


State 40

   31 return: RETURN . expr SEMI_COL
   32       | RETURN . SEMI_COL

    INT       shift, and go to state 34
    FLOAT     shift, and go to state 35
    SEMI_COL  shift, and go to state 60
    LP        shift, and go to state 36
    ID        shift, and go to state 41

    expr         go to state 61
    variable     go to state 48
    simple-expr  go to state 49
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    table        go to state 54


State 41

   35 variable: ID .
   36         | ID . LC simple-expr RC
   48 call: ID . LP args RP
   53 table: ID . ATRIB LCH list-table RCH SEMI_COL

    LP     shift, and go to state 62
    LC     shift, and go to state 63
    ATRIB  shift, and go to state 64

    ATRIB     [reduce using rule 35 (variable)]
    $default  reduce using rule 35 (variable)


State 42

   18 stmt-list: stmt-list stmt .

    $default  reduce using rule 18 (stmt-list)


State 43

   21 stmt: expr . SEMI_COL

    SEMI_COL  shift, and go to state 65


State 44

   20 stmt: cond-block .

    $default  reduce using rule 20 (stmt)


State 45

   22 stmt: iter .

    $default  reduce using rule 22 (stmt)


State 46

   24 stmt: return .

    $default  reduce using rule 24 (stmt)


State 47

   23 stmt: iter-table .

    $default  reduce using rule 23 (stmt)


State 48

   25 expr: variable . ATRIB expr-op
   44 factor: variable .

    ATRIB  shift, and go to state 66

    $default  reduce using rule 44 (factor)


State 49

   26 expr: simple-expr .

    $default  reduce using rule 26 (expr)


State 50

   37 simple-expr: expr-op . CMDOP expr-op
   38            | expr-op .
   39 expr-op: expr-op . OP term

    OP     shift, and go to state 67
    CMDOP  shift, and go to state 68

    $default  reduce using rule 38 (simple-expr)


State 51

   40 expr-op: term .
   41 term: term . OP factor

    OP  shift, and go to state 69

    OP        [reduce using rule 40 (expr-op)]
    $default  reduce using rule 40 (expr-op)


State 52

   42 term: factor .

    $default  reduce using rule 42 (term)


State 53

   45 factor: call .

    $default  reduce using rule 45 (factor)


State 54

   27 expr: table .

    $default  reduce using rule 27 (expr)


State 55

   43 factor: LP expr . RP

    RP  shift, and go to state 70


State 56

   28 cond-block: IF LP . simple-expr RP compound-stmt
   29           | IF LP . simple-expr RP compound-stmt ELSE compound-stmt

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable     go to state 72
    simple-expr  go to state 73
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53


State 57

   30 iter: FOR LP . expr SEMI_COL simple-expr SEMI_COL expr RP compound-stmt

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 41

    expr         go to state 74
    variable     go to state 48
    simple-expr  go to state 49
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    table        go to state 54


State 58

   33 iter-table: FOR ROWS . LC STR_VAL RC LP variable SEMI_COL variable RP compound-stmt

    LC  shift, and go to state 75


State 59

   34 iter-table: FOR CELLS . LP variable SEMI_COL variable RP compound-stmt

    LP  shift, and go to state 76


State 60

   32 return: RETURN SEMI_COL .

    $default  reduce using rule 32 (return)


State 61

   31 return: RETURN expr . SEMI_COL

    SEMI_COL  shift, and go to state 77


State 62

   48 call: ID LP . args RP

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    $default  reduce using rule 50 (args)

    variable     go to state 72
    simple-expr  go to state 78
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    args         go to state 79
    args-list    go to state 80


State 63

   36 variable: ID LC . simple-expr RC

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable     go to state 72
    simple-expr  go to state 81
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53


State 64

   53 table: ID ATRIB . LCH list-table RCH SEMI_COL

    LCH  shift, and go to state 82


State 65

   21 stmt: expr SEMI_COL .

    $default  reduce using rule 21 (stmt)


State 66

   25 expr: variable ATRIB . expr-op

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable  go to state 72
    expr-op   go to state 83
    term      go to state 51
    factor    go to state 52
    call      go to state 53


State 67

   39 expr-op: expr-op OP . term

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable  go to state 72
    term      go to state 84
    factor    go to state 52
    call      go to state 53


State 68

   37 simple-expr: expr-op CMDOP . expr-op

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable  go to state 72
    expr-op   go to state 85
    term      go to state 51
    factor    go to state 52
    call      go to state 53


State 69

   41 term: term OP . factor

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable  go to state 72
    factor    go to state 86
    call      go to state 53


State 70

   43 factor: LP expr RP .

    $default  reduce using rule 43 (factor)


State 71

   35 variable: ID .
   36         | ID . LC simple-expr RC
   48 call: ID . LP args RP

    LP  shift, and go to state 62
    LC  shift, and go to state 63

    $default  reduce using rule 35 (variable)


State 72

   44 factor: variable .

    $default  reduce using rule 44 (factor)


State 73

   28 cond-block: IF LP simple-expr . RP compound-stmt
   29           | IF LP simple-expr . RP compound-stmt ELSE compound-stmt

    RP  shift, and go to state 87


State 74

   30 iter: FOR LP expr . SEMI_COL simple-expr SEMI_COL expr RP compound-stmt

    SEMI_COL  shift, and go to state 88


State 75

   33 iter-table: FOR ROWS LC . STR_VAL RC LP variable SEMI_COL variable RP compound-stmt

    STR_VAL  shift, and go to state 89


State 76

   34 iter-table: FOR CELLS LP . variable SEMI_COL variable RP compound-stmt

    ID  shift, and go to state 90

    variable  go to state 91


State 77

   31 return: RETURN expr SEMI_COL .

    $default  reduce using rule 31 (return)


State 78

   52 args-list: simple-expr .

    $default  reduce using rule 52 (args-list)


State 79

   48 call: ID LP args . RP

    RP  shift, and go to state 92


State 80

   49 args: args-list .
   51 args-list: args-list . COL args

    COL  shift, and go to state 93

    COL       [reduce using rule 49 (args)]
    $default  reduce using rule 49 (args)


State 81

   36 variable: ID LC simple-expr . RC

    RC  shift, and go to state 94


State 82

   53 table: ID ATRIB LCH . list-table RCH SEMI_COL

    STR_VAL  shift, and go to state 95

    $default  reduce using rule 56 (list-table)

    list-table  go to state 96


State 83

   25 expr: variable ATRIB expr-op .
   39 expr-op: expr-op . OP term

    OP  shift, and go to state 67

    $default  reduce using rule 25 (expr)


State 84

   39 expr-op: expr-op OP term .
   41 term: term . OP factor

    $default  reduce using rule 39 (expr-op)


State 85

   37 simple-expr: expr-op CMDOP expr-op .
   39 expr-op: expr-op . OP term

    OP  shift, and go to state 67

    $default  reduce using rule 37 (simple-expr)


State 86

   41 term: term OP factor .

    $default  reduce using rule 41 (term)


State 87

   28 cond-block: IF LP simple-expr RP . compound-stmt
   29           | IF LP simple-expr RP . compound-stmt ELSE compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 97


State 88

   30 iter: FOR LP expr SEMI_COL . simple-expr SEMI_COL expr RP compound-stmt

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable     go to state 72
    simple-expr  go to state 98
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53


State 89

   33 iter-table: FOR ROWS LC STR_VAL . RC LP variable SEMI_COL variable RP compound-stmt

    RC  shift, and go to state 99


State 90

   35 variable: ID .
   36         | ID . LC simple-expr RC

    LC  shift, and go to state 63

    $default  reduce using rule 35 (variable)


State 91

   34 iter-table: FOR CELLS LP variable . SEMI_COL variable RP compound-stmt

    SEMI_COL  shift, and go to state 100


State 92

   48 call: ID LP args RP .

    $default  reduce using rule 48 (call)


State 93

   51 args-list: args-list COL . args

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    $default  reduce using rule 50 (args)

    variable     go to state 72
    simple-expr  go to state 78
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    args         go to state 101
    args-list    go to state 80


State 94

   36 variable: ID LC simple-expr RC .

    $default  reduce using rule 36 (variable)


State 95

   54 list-table: STR_VAL . DOUBLEDOT LC factor-list RC

    DOUBLEDOT  shift, and go to state 102


State 96

   53 table: ID ATRIB LCH list-table . RCH SEMI_COL
   55 list-table: list-table . COL list-table

    RCH  shift, and go to state 103
    COL  shift, and go to state 104


State 97

   28 cond-block: IF LP simple-expr RP compound-stmt .
   29           | IF LP simple-expr RP compound-stmt . ELSE compound-stmt

    ELSE  shift, and go to state 105

    $default  reduce using rule 28 (cond-block)


State 98

   30 iter: FOR LP expr SEMI_COL simple-expr . SEMI_COL expr RP compound-stmt

    SEMI_COL  shift, and go to state 106


State 99

   33 iter-table: FOR ROWS LC STR_VAL RC . LP variable SEMI_COL variable RP compound-stmt

    LP  shift, and go to state 107


State 100

   34 iter-table: FOR CELLS LP variable SEMI_COL . variable RP compound-stmt

    ID  shift, and go to state 90

    variable  go to state 108


State 101

   51 args-list: args-list COL args .

    $default  reduce using rule 51 (args-list)


State 102

   54 list-table: STR_VAL DOUBLEDOT . LC factor-list RC

    LC  shift, and go to state 109


State 103

   53 table: ID ATRIB LCH list-table RCH . SEMI_COL

    SEMI_COL  shift, and go to state 110


State 104

   55 list-table: list-table COL . list-table

    STR_VAL  shift, and go to state 95

    $default  reduce using rule 56 (list-table)

    list-table  go to state 111


State 105

   29 cond-block: IF LP simple-expr RP compound-stmt ELSE . compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 112


State 106

   30 iter: FOR LP expr SEMI_COL simple-expr SEMI_COL . expr RP compound-stmt

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 41

    expr         go to state 113
    variable     go to state 48
    simple-expr  go to state 49
    expr-op      go to state 50
    term         go to state 51
    factor       go to state 52
    call         go to state 53
    table        go to state 54


State 107

   33 iter-table: FOR ROWS LC STR_VAL RC LP . variable SEMI_COL variable RP compound-stmt

    ID  shift, and go to state 90

    variable  go to state 114


State 108

   34 iter-table: FOR CELLS LP variable SEMI_COL variable . RP compound-stmt

    RP  shift, and go to state 115


State 109

   54 list-table: STR_VAL DOUBLEDOT LC . factor-list RC

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    $default  reduce using rule 59 (factor-list)

    variable     go to state 72
    factor       go to state 116
    call         go to state 53
    factor-list  go to state 117


State 110

   53 table: ID ATRIB LCH list-table RCH SEMI_COL .

    $default  reduce using rule 53 (table)


State 111

   55 list-table: list-table . COL list-table
   55           | list-table COL list-table .

    $default  reduce using rule 55 (list-table)


State 112

   29 cond-block: IF LP simple-expr RP compound-stmt ELSE compound-stmt .

    $default  reduce using rule 29 (cond-block)


State 113

   30 iter: FOR LP expr SEMI_COL simple-expr SEMI_COL expr . RP compound-stmt

    RP  shift, and go to state 118


State 114

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable . SEMI_COL variable RP compound-stmt

    SEMI_COL  shift, and go to state 119


State 115

   34 iter-table: FOR CELLS LP variable SEMI_COL variable RP . compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 120


State 116

   57 factor-list: factor . COL factor
   58            | factor .

    COL  shift, and go to state 121

    $default  reduce using rule 58 (factor-list)


State 117

   54 list-table: STR_VAL DOUBLEDOT LC factor-list . RC

    RC  shift, and go to state 122


State 118

   30 iter: FOR LP expr SEMI_COL simple-expr SEMI_COL expr RP . compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 123


State 119

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable SEMI_COL . variable RP compound-stmt

    ID  shift, and go to state 90

    variable  go to state 124


State 120

   34 iter-table: FOR CELLS LP variable SEMI_COL variable RP compound-stmt .

    $default  reduce using rule 34 (iter-table)


State 121

   57 factor-list: factor COL . factor

    INT    shift, and go to state 34
    FLOAT  shift, and go to state 35
    LP     shift, and go to state 36
    ID     shift, and go to state 71

    variable  go to state 72
    factor    go to state 125
    call      go to state 53


State 122

   54 list-table: STR_VAL DOUBLEDOT LC factor-list RC .

    $default  reduce using rule 54 (list-table)


State 123

   30 iter: FOR LP expr SEMI_COL simple-expr SEMI_COL expr RP compound-stmt .

    $default  reduce using rule 30 (iter)


State 124

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable SEMI_COL variable . RP compound-stmt

    RP  shift, and go to state 126


State 125

   57 factor-list: factor COL factor .

    $default  reduce using rule 57 (factor-list)


State 126

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable SEMI_COL variable RP . compound-stmt

    LCH  shift, and go to state 24

    compound-stmt  go to state 127


State 127

   33 iter-table: FOR ROWS LC STR_VAL RC LP variable SEMI_COL variable RP compound-stmt .

    $default  reduce using rule 33 (iter-table)
